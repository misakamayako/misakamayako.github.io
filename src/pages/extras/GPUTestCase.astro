---
import BaseLayout from "../../layouts/home.astro"
import Navigation from "../../components/Navigation.astro";
import Footer from "../../components/Footer.astro";
---
<BaseLayout pageTitle="WebGPU vs CPU ÊÄßËÉΩÂØπÊØî">
    <Navigation/>
    <style>
        :root {
            --primary: #4a6fa5;
            --secondary: #6b8cbc;
            --accent: #ff6b6b;
            --light: #f5f7fa;
            --dark: #2c3e50;
            --success: #4caf50;
            --warning: #ff9800;
            --gpu-color: #8a2be2;
            --cpu-color: #ff6347;
            --gpu-total-color: #00bcd4;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        .container {
            max-width: unset;
            margin: 0 auto;
            height: 100%;
            overflow: auto;
            > *{
                margin: 0 auto;
                width: 1200px;
            }
        }

        header {
            text-align: center;
            padding: 2rem 0;
            margin-bottom: 2rem;
        }

        h1 {
            font-size: 2.8rem;
            margin-bottom: 1rem;
            background: linear-gradient(to right, var(--gpu-color), var(--cpu-color));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .subtitle {
            font-size: 1.2rem;
            max-width: 800px;
            margin: 0 auto 1.5rem;
            color: #d1d8e0;
        }

        .card {
            background: rgba(255, 255, 255, 0.08);
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .card-title {
            font-size: 1.5rem;
            margin-bottom: 1.2rem;
            color: #fff;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .card-title i {
            font-size: 1.8rem;
        }

        .controls {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 20px;
        }

        .control-group {
            display: flex;
            flex-direction: column;
            flex: 1;
            min-width: 200px;
        }

        label {
            margin-bottom: 8px;
            font-weight: 500;
            color: #aab7c5;
        }

        input, select, button {
            padding: 12px 15px;
            border-radius: 8px;
            border: none;
            background: rgba(255, 255, 255, 0.12);
            color: white;
            font-size: 1rem;
        }

        input:focus, select:focus {
            outline: 2px solid var(--primary);
        }

        button {
            background: linear-gradient(45deg, var(--gpu-total-color), var(--gpu-color), var(--cpu-color));
            color: white;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        button:active {
            transform: translateY(0);
        }

        button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .results {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
            margin-top: 20px;
        }

        .result-box {
            flex: 1;
            min-width: 300px;
            padding: 20px;
            border-radius: 10px;
            background: rgba(0, 0, 0, 0.2);
            text-align: center;
        }

        .gpu-box {
            border-top: 4px solid var(--gpu-color);
        }

        .gpu-total-box {
            border-top: 4px solid var(--gpu-total-color);
        }

        .cpu-box {
            border-top: 4px solid var(--cpu-color);
        }

        .result-title {
            font-size: 1.2rem;
            margin-bottom: 10px;
            color: #fff;
        }

        .time-value {
            font-size: 2.5rem;
            font-weight: bold;
            margin: 10px 0;
        }

        .gpu-time {
            color: var(--gpu-color);
        }

        .gpu-transfer-time {
            color: var(--gpu-total-color);
        }

        .cpu-time {
            color: var(--cpu-color);
        }

        .comparison {
            background: rgba(0, 0, 0, 0.3);
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            margin-top: 20px;
        }

        .comparison-value {
            font-size: 2rem;
            font-weight: bold;
            margin: 10px 0;
            color: var(--accent);
        }

        .comparison-text {
            margin-top: 10px;
            font-size: 1.1rem;
        }

        .progress-container {
            height: 8px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
            overflow: hidden;
            margin: 20px 0;
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, var(--gpu-color), var(--cpu-color));
            width: 0%;
            transition: width 0.5s ease;
        }

        .visualization {
            display: flex;
            justify-content: space-around;
            align-items: flex-end;
            height: 200px;
            margin: 30px 0;
            gap: 10px;
        }

        .bar {
            width: 50px;
            border-radius: 5px 5px 0 0;
            position: relative;
            transition: height 0.8s ease;
        }

        .bar.gpu-total-bar{
            background-color: var(--gpu-total-color);
        }

        .bar.gpu-bar{
            background-color: var(--gpu-color);
        }
        .bar.cpu-bar{
            background-color: var(--cpu-color);
        }

        .bar-label {
            position: absolute;
            bottom: -30px;
            left: -20px;
            right: -20px;
            text-align: center;
            color: #d1d8e0;
        }

        .bar-value {
            position: absolute;
            top: -25px;
            left: 0;
            right: 0;
            text-align: center;
            font-weight: bold;
        }

        .output {
            background: rgba(0, 0, 0, 0.3);
            padding: 15px;
            border-radius: 8px;
            font-family: monospace;
            min-height: 150px;
            margin-top: 20px;
            white-space: pre-wrap;
        }

        .success {
            color: var(--success);
        }

        .error {
            color: var(--accent);
        }

        .info {
            color: #aab7c5;
            font-size: 0.9rem;
            margin-top: 5px;
        }

        @media (max-width: 768px) {
            .controls {
                flex-direction: column;
            }

            .control-group {
                min-width: 100%;
            }

            .results {
                flex-direction: column;
            }

            .result-box {
                min-width: 100%;
            }

            .visualization .bar {
                width: 30px;
            }
        }
    </style>
    <div class="container" style="background: linear-gradient(135deg, #1a2a6c, #2c3e50);color: var(--light);">
        <header>
            <h1>WebGPU vs CPU ÊÄßËÉΩÂØπÊØî</h1>
            <p class="subtitle">Êú¨ÊºîÁ§∫‰ΩøÁî® WebGPU Âíå JavaScript ËÆ°ÁÆóÊúÄËøëÈÇªÁÇπÔºåÂØπÊØî GPU Âíå CPU
                Âú®Âπ∂Ë°åËÆ°ÁÆó‰∏äÁöÑÊÄßËÉΩÂ∑ÆÂºÇ„ÄÇË∞ÉÊï¥ÁÇπÊï∞Âπ∂ËøêË°åÊµãËØï‰ª•Êü•ÁúãÁªìÊûú„ÄÇ</p>
        </header>

        <main>
            <div class="card">
                <h2 class="card-title">‚öôÔ∏è ÊµãËØïÊéßÂà∂</h2>

                <div class="controls">
                    <div class="control-group">
                        <label for="pointCount">ÁÇπÁöÑÊï∞Èáè:</label>
                        <input id="pointCount"  value="1000000">
                    </div>

                    <div class="control-group">
                        <label for="runs">ÊµãËØïÊ¨°Êï∞:</label>
                        <select id="runs">
                            <option value="1" style="color: black">1 Ê¨°</option>
                            <option value="3" selected style="color: black">3 Ê¨°</option>
                            <option value="5" style="color: black">5 Ê¨°</option>
                            <option value="10" style="color: black">10 Ê¨°</option>
                        </select>
                    </div>

                    <div class="control-group">
                        <label>&nbsp;</label>
                        <button id="runTest">
                            <span>üöÄ ËøêË°åÊÄßËÉΩÊµãËØï</span>
                        </button>
                    </div>
                </div>

                <div class="progress-container">
                    <div class="progress-bar" id="progressBar"></div>
                </div>
            </div>

            <div class="card" id="result">
                <h2 class="card-title">üìä ÊÄßËÉΩÁªìÊûú</h2>

                <div class="results">
                    <div class="result-box gpu-total-box">
                        <div class="result-title">GPU ÊÄªËÆ°</div>
                        <div class="time-value gpu-transfer-time" id="gpuTotalTime">0.00 ms</div>
                    </div>
                    <div class="result-box gpu-box">
                        <div class="result-title">GPU ËÆ°ÁÆóÊó∂Èó¥</div>
                        <div class="time-value gpu-time" id="gpuTime">0.00 ms</div>
                    </div>
                    <div class="result-box cpu-box">
                        <div class="result-title">CPU ËÆ°ÁÆóÊó∂Èó¥</div>
                        <div class="time-value cpu-time" id="cpuTime">0.00 ms</div>
                    </div>
                </div>

                <div class="comparison">
                    <div class="result-title">ÊÄßËÉΩÂ∑ÆÂºÇ</div>
                    <div class="comparison-value" id="difference">0.00 ms</div>
                    <div class="comparison-text" id="differenceText">GPU ÊØî CPU ËÆ°ÁÆóÂø´ 0.00%</div>
                </div>

                <div class="visualization" id="visualization">
                    <div class="bar gpu-total-bar">
                        <div class="bar-value">0</div>
                        <div class="bar-label">GPU ÊÄªËÆ°</div>
                    </div>
                    <div class="bar gpu-bar">
                        <div class="bar-value">0</div>
                        <div class="bar-label">GPU ËÆ°ÁÆó</div>
                    </div>
                    <div class="bar cpu-bar">
                        <div class="bar-value">0</div>
                        <div class="bar-label">CPU</div>
                    </div>
                </div>
            </div>

            <div class="card">
                <h2 class="card-title">üìù ËæìÂá∫ÁªìÊûú</h2>
                <div class="output" id="output">ÂáÜÂ§áËøêË°åÊµãËØï...</div>
            </div>
        </main>
    </div>
    <Footer/>
    <script is:inline>
        /// <reference types="@webgpu/types" />
        document.addEventListener('DOMContentLoaded', () => {
            const runButton = document.getElementById('runTest');
            const pointCountInput = document.getElementById('pointCount');
            const runsSelect = document.getElementById('runs');
            const outputEl = document.getElementById('output');
            const gpuComputeTimeEl = document.getElementById('gpuTime');
            const gpuTotalTimeEl = document.getElementById('gpuTotalTime');
            const cpuTimeEl = document.getElementById('cpuTime');
            const differenceEl = document.getElementById('difference');
            const differenceTextEl = document.getElementById('differenceText');
            const progressBar = document.getElementById('progressBar');
            const gpuBar = document.querySelector('.gpu-bar');
            const gpuTotalBar = document.querySelector('.gpu-total-bar');
            const cpuBar = document.querySelector('.cpu-bar');

            let gpuTotalComputeTime = 0;
            let gpuTotalTime = 0;
            let cpuTotalTime = 0;
            let completedRuns = 0;

            runButton.addEventListener('click', async () => {
                const pointCount = parseInt(pointCountInput.value);
                if (isNaN(pointCount)){
                    outputEl.textContent = "ËØ∑ËæìÂÖ•Ê≠£Á°ÆÁöÑÊï∞Èáè";
                    return;
                }
                const runs = parseInt(runsSelect.value);
                gpuTotalComputeTime = 0;
                gpuTotalTime = 0
                cpuTotalTime = 0;
                completedRuns = 0;
                document.getElementById("result").scrollIntoView({behavior:"smooth"})
                if (!navigator.gpu) {
                    outputEl.textContent = "ÂΩìÂâçÊµèËßàÂô®‰∏çÊîØÊåÅ WebGPU";
                    return;
                }
                const adapter = await navigator.gpu.requestAdapter();
                if (!adapter) {
                    outputEl.textContent = "Êó†Ê≥ïËé∑Âèñ WebGPU ÈÄÇÈÖçÂô®";
                    return;
                }
                let device
                try {
                    device = await adapter.requestDevice({
                        requiredFeatures: ['timestamp-query', 'chromium-experimental-timestamp-query-inside-passes']
                    });
                } catch (e) {
                    outputEl.textContent = 'ÈîôËØØÔºöËØ∑Âú® chrome://flags/#enable-unsafe-webgpu ÂêØÁî® Unsafe WebGPU Support'
                    return
                }
                const limit = device.limits.maxComputeWorkgroupsPerDimension
                if (pointCount > limit * 64) {
                    outputEl.textContent = `ÈîôËØØÔºöÂΩìÂâçÊµãËØï‰ª£Á†ÅÂú®ÂΩìÂâçËÆæÂ§áÊúÄÂ§ßÊé•ÂèóÊï∞ÊçÆÈáè‰∏∫${limit * 64}`;
                    return;
                }
                runButton.disabled = true;
                outputEl.textContent = "ÂàùÂßãÂåñÊµãËØï...";
                progressBar.style.width = '0%';
                for (let i = 0; i < runs; i++) {
                    outputEl.textContent += `ËøêË°åÊµãËØï ${i + 1}/${runs}...\r\n`;
                    await runTest(device, pointCount, i);
                    completedRuns = i + 1;
                    progressBar.style.width = `${(completedRuns / runs) * 100}%`;
                }
                const avgGpuComputeTime = gpuTotalComputeTime / runs;
                const avgGpuTotalTime = gpuTotalTime / runs;
                const avgCpuTime = cpuTotalTime / runs;
                const diff = avgCpuTime - avgGpuComputeTime;
                const percentDiff = (diff / avgCpuTime) * 100;
                gpuComputeTimeEl.textContent = `${avgGpuComputeTime.toFixed(2)} ms`;
                gpuTotalTimeEl.textContent = `${avgGpuTotalTime.toFixed(2)} ms`;
                cpuTimeEl.textContent = `${avgCpuTime.toFixed(2)} ms`;
                differenceEl.textContent = `${diff.toFixed(2)} ms`;
                differenceTextEl.textContent = `GPU ÊØî CPU Âø´ ${percentDiff.toFixed(1)}%`;
                outputEl.textContent += `\n\nÊµãËØïÂÆåÊàêÔºÅÂπ≥ÂùáÁªìÊûúÔºö\nGPU: ${avgGpuComputeTime.toFixed(2)} ms\nCPU: ${avgCpuTime.toFixed(2)} ms`;
                const maxTime = Math.max(avgGpuComputeTime, avgGpuTotalTime, avgCpuTime);
                gpuBar.style.height = `${(avgGpuComputeTime / maxTime) * 100}%`;
                gpuBar.querySelector('.bar-value').textContent = `${avgGpuComputeTime.toFixed(2)}`;
                gpuTotalBar.style.height = `${(avgGpuTotalTime / maxTime) * 100}%`;
                gpuTotalBar.querySelector('.bar-value').textContent = `${avgGpuTotalTime.toFixed(2)}`;
                cpuBar.style.height = `${(avgCpuTime / maxTime) * 100}%`;
                cpuBar.querySelector('.bar-value').textContent = `${avgCpuTime.toFixed(2)}`;
                runButton.disabled = false;
            });

            async function runTest(device, N, runIndex) {
                const querySet = device.createQuerySet({
                    type: 'timestamp',
                    count: 2,
                });
                const queryResolveBuffer = device.createBuffer({
                    size: 16,
                    usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC
                });
                const queryReadBuffer = device.createBuffer({
                    size: 16,
                    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ
                });
                const points = new Float32Array(N * 2);
                for (let i = 0; i < N * 2; i++) {
                    points[i] = Math.random() * 2 - 1;
                }
                const target = new Float32Array([Math.random() * 2 - 1, Math.random() * 2 - 1]);
                const pointsBuf = device.createBuffer({
                    size: points.byteLength,
                    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST
                });
                device.queue.writeBuffer(pointsBuf, 0, points);
                const targetBuf = device.createBuffer({
                    size: target.byteLength,
                    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST
                });
                device.queue.writeBuffer(targetBuf, 0, target);
                const partialBuf = device.createBuffer({
                    size: N * 8,
                    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC
                });
                const readBuf = device.createBuffer({
                    size: N * 8,
                    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ
                });
                const shaderCode = `
        struct Point {
            pos: vec2<f32>,
        };

        struct Result {
            dist: f32,
            idx: u32,
        };

        @group(0) @binding(0) var<storage, read> points : array<Point>;
        @group(0) @binding(1) var<uniform> u_target : vec2<f32>;
        @group(0) @binding(2) var<storage, read_write> partial : array<Result>;

        @compute @workgroup_size(64)
        fn main(@builtin(global_invocation_id) gid : vec3<u32>) {
            let i = gid.x;
            if (i >= arrayLength(&points)) {
                return;
            }
            let d = distance(points[i].pos, u_target);
            partial[i] = Result(d, i);
        }
    `;
                const module = device.createShaderModule({code: shaderCode});
                const pipeline = device.createComputePipeline({
                    layout: 'auto',
                    compute: {
                        module,
                        entryPoint: 'main'
                    }
                });
                const bindGroup = device.createBindGroup({
                    layout: pipeline.getBindGroupLayout(0),
                    entries: [
                        {binding: 0, resource: {buffer: pointsBuf}},
                        {binding: 1, resource: {buffer: targetBuf}},
                        {binding: 2, resource: {buffer: partialBuf}},
                    ]
                });
                const commandEncoder = device.createCommandEncoder();
                const pass = commandEncoder.beginComputePass();
                pass.writeTimestamp(querySet, 0);
                pass.setPipeline(pipeline);
                pass.setBindGroup(0, bindGroup);
                pass.dispatchWorkgroups(Math.ceil(N / 64));
                pass.writeTimestamp(querySet, 1);
                pass.end();
                commandEncoder.resolveQuerySet(querySet, 0, 2, queryResolveBuffer, 0);
                commandEncoder.copyBufferToBuffer(queryResolveBuffer, 0, queryReadBuffer, 0, 16);
                commandEncoder.copyBufferToBuffer(partialBuf, 0, readBuf, 0, N * 8);
                const gpuStart = performance.now();
                device.queue.submit([commandEncoder.finish()]);
                await device.queue.onSubmittedWorkDone();
                const gpuEnd = performance.now()
                // 6. ËØªÂèñ timestamp
                await queryReadBuffer.mapAsync(GPUMapMode.READ);
                const timestampArray = new BigUint64Array(queryReadBuffer.getMappedRange());
                const gpuTimeNs = timestampArray[1] - timestampArray[0];
                const gpuTimeMs = Number(gpuTimeNs) / 1_000_000;
                queryReadBuffer.unmap();

                // 7. ËØªÂèñÁªìÊûú buffer
                await readBuf.mapAsync(GPUMapMode.READ);

                const view = new DataView(readBuf.getMappedRange());
                let gpuMinDist = Infinity, gpuMinIdx = -1;
                for (let i = 0; i < N; i++) {
                    const offset = i * 8;
                    const d = view.getFloat32(offset, true);
                    const idx = view.getUint32(offset + 4, true);
                    if (d < gpuMinDist) {
                        gpuMinDist = d;
                        gpuMinIdx = idx;
                    }
                }
                readBuf.unmap();

                gpuTotalComputeTime += gpuTimeMs;
                gpuTotalTime += gpuEnd - gpuStart;

                // 8. CPU ËÆ°ÁÆó
                const startCPU = performance.now();
                let cpuMinDist = Infinity, cpuMinIdx = -1;
                for (let i = 0; i < N; i++) {
                    const dx = points[2 * i] - target[0];
                    const dy = points[2 * i + 1] - target[1];
                    const dist = Math.hypot(dx, dy);
                    if (dist < cpuMinDist) {
                        cpuMinDist = dist;
                        cpuMinIdx = i;
                    }
                }
                const endCPU = performance.now();
                const cpuTime = endCPU - startCPU;
                cpuTotalTime += cpuTime;

                const ok = (gpuMinIdx === cpuMinIdx && Math.abs(gpuMinDist - cpuMinDist) < 1e-6);
                const runOutput = `ÊµãËØï #${runIndex + 1} ÁªìÊûú:
ÁõÆÊ†áÁÇπ: (${target[0].toFixed(3)}, ${target[1].toFixed(3)})
GPU ÊúÄËøëÈÇª idx=${gpuMinIdx}, dist=${gpuMinDist.toFixed(6)}
  - GPU ËÆ°ÁÆóÊó∂Èó¥: ${gpuTimeMs.toFixed(2)} ms
  - GPU ÊÄªËÆ°: ${(gpuEnd - gpuStart).toFixed(2)} ms
CPU ÊúÄËøëÈÇª idx=${cpuMinIdx}, dist=${cpuMinDist.toFixed(6)} (Áî®Êó∂: ${cpuTime.toFixed(2)} ms)
È™åËØÅ ${ok ? 'ÈÄöËøá ‚úÖ' : 'Êú™ÈÄöËøá ‚ùå'}\r\n\r\n`;

                outputEl.textContent += runOutput;
            }
        });
    </script>
</BaseLayout>
