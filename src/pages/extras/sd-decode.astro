---
import BaseLayout from "../../layouts/home.astro"
import Navigation from "../../components/Navigation.astro";
import sdModule from "../../styles/sd-decode.module.css"
import {FontAwesomeIcon} from "@fortawesome/react-fontawesome";
import {
    faBolt,
    faCamera,
    faChartBar,
    faCloudUploadAlt,
    faCode, faDownload, faFileCode,
    faFolderOpen, faImage,
    faLock, faRedo, faRulerCombined, faSignature, faWeight
} from "@fortawesome/free-solid-svg-icons";
import Footer from "../../components/Footer.astro";
---
<BaseLayout pageTitle="在线解析sd图片信息">
    <Navigation/>
    <div class="text-slate-700">
        <div class="max-w-5xl mx-auto px-4 py-12">
            <!-- 页头 -->
            <header class="text-center mb-14">
                <div class="flex justify-center mb-6">
                    <div class="w-24 h-24 rounded-full bg-gradient-to-br
                 from-slate-700 to-slate-600 flex items-center justify-center animate-bounce
                 duration-700
                 ">
                        <FontAwesomeIcon icon={faCamera} className="text-white h-9"/>
                    </div>
                </div>
                <h1 class="text-4xl md:text-5xl font-bold mb-4">
                    <span class={sdModule.sourceText}>Stable Diffusion</span>元数据解析器
                </h1>
                <p class="text-lg text-slate-600 max-w-2xl mx-auto">
                    上传图片提取EXIF元数据，所有处理均在您的浏览器中完成
                    <br/>
                    <span class="font-bold text-slate-700">图片不会发送到任何服务器</span>
                </p>
            </header>

            <!-- 隐私保障说明 -->
            <div class="bg-slate-50 border border-slate-200 rounded-xl p-6 mb-10 flex items-start shadow-sm">
                <div class="mr-4 mt-1 text-slate-700">
                    <FontAwesomeIcon icon={faLock} className="w-6"/>
                </div>
                <div>
                    <h3 class="font-bold text-xl text-slate-900 mb-2">100% 隐私保障</h3>
                    <p class="text-slate-700">
                        您的图片永远不会离开您的设备！所有元数据提取操作都在浏览器中本地完成，
                        <span class="font-semibold">无服务器交互，无数据传输</span>，完全保护您的隐私。
                    </p>
                </div>
            </div>

            <!-- 上传区域 -->
            <div class="mb-16">
                <div id="upload-container" class={sdModule.uploadArea} onclick="getImageByClick()"
                     ondrop="handleDrop(event)"
                     ondragover="allowDrop(event)"
                >
                    <div class="mb-5">
                        <div class="w-24 h-24 mx-auto bg-slate-100 rounded-full flex items-center justify-center mb-4 border-2 border-dashed border-slate-300">
                            <FontAwesomeIcon icon={faCloudUploadAlt} className="w-9"/>
                        </div>
                        <h3 class="text-xl font-semibold mb-3 text-slate-900">拖放图片到此处</h3>
                        <p class="text-slate-500 mb-5">或点击选择图片文件</p>
                        <button id="upload-btn" class={sdModule.btnPrimary}>
                            <FontAwesomeIcon icon={faFolderOpen} className="mr-2 w-4 inline-block"/>
                            选择图片
                        </button>
                    </div>
                    <p class="text-sm text-slate-500">支持格式:
                        PNG(SD生成的图片均为PNG形式，并且只有PNG可以保留生成信息)</p>
                </div>
            </div>

            <div id="result-section" class="hidden">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- 图片预览 -->
                    <div class="metadata-card">
                        <h3 class="font-semibold text-lg text-slate-900 mb-4 flex items-center">
                            <FontAwesomeIcon icon={faImage} className="mr-2 inline-block w-4"/>
                            图片预览
                        </h3>
                        <div class="aspect-square bg-slate-50 rounded-lg overflow-hidden border border-slate-200 flex items-center justify-center">
                            <img id="image-preview" class="w-full h-full object-contain" src="" alt="预览">
                        </div>
                    </div>

                    <!-- 文件信息 -->
                    <div class="metadata-card">
                        <h3 class="font-semibold text-lg text-slate-900 mb-4 flex justify-between">
                            <span>
                                <i class="fas fa-file-alt text-slate-700 mr-2"></i>文件信息
                            </span>
                            <button id="reset-btn" class="btn-outline cursor-pointer" onclick="getImageByClick()">
                                <FontAwesomeIcon icon={faRedo} className="mr-2 inline-block w-4"/>
                                解析新图片
                            </button>
                        </h3>
                        <div class="space-y-4">
                            <div class="flex items-center py-2 border-b border-slate-100">
                            <span class="w-32 text-slate-500 flex items-center">
                                <FontAwesomeIcon icon={faSignature} className="mr-2 w-4"/>
                                文件名:
                            </span>
                                <span id="file-name" class="font-medium text-slate-900 truncate">example.jpg</span>
                            </div>
                            <div class="flex items-center py-2 border-b border-slate-100">
                            <span class="w-32 text-slate-500 flex items-center">
                                <FontAwesomeIcon icon={faFileCode} className="mr-2 w-4"/>
                                文件类型:
                            </span>
                                <span id="file-type" class="font-medium text-slate-900">JPEG</span>
                            </div>
                            <div class="flex items-center py-2 border-b border-slate-100">
                            <span class="w-32 text-slate-500 flex items-center">
                                <FontAwesomeIcon icon={faWeight} className="mr-2 w-4"/>
                                文件大小:
                            </span>
                                <span id="file-size" class="font-medium text-slate-900">2.4 MB</span>
                            </div>
                            <div class="flex items-center py-2">
                            <span class="w-32 text-slate-500 flex items-center">
                                <FontAwesomeIcon icon={faRulerCombined} className="mr-2 w-4"/>
                                尺寸:
                            </span>
                                <span id="image-dimensions" class="font-medium text-slate-900">4032 × 3024</span>
                            </div>
                        </div>
                    </div>

                    <!-- 生成参数 -->
                    <div class="metadata-card md:col-span-2">
                        <h3 class="font-semibold text-lg text-slate-900 mb-4 flex items-center">
                            <i class="fas fa-cogs text-slate-700 mr-2"></i>生成参数
                        </h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <!-- 提示词 -->
                            <div class="md:col-span-2 flex items-start p-3 bg-slate-50 rounded-lg">
                                <span class="w-32 text-slate-500 flex-shrink-0">提示词:</span>
                                <span id="gen-prompt" class="font-medium text-slate-900 break-words"></span>
                            </div>

                            <!-- 负面提示词 -->
                            <div class="md:col-span-2 flex items-start p-3 bg-slate-50 rounded-lg">
                                <span class="w-32 text-slate-500 flex-shrink-0">负面提示词:</span>
                                <span id="gen-negative-prompt" class="font-medium text-slate-900 break-words"></span>
                            </div>

                            <!-- 尺寸 -->
                            <div class="flex items-center p-3 bg-slate-50 rounded-lg">
                                <span class="w-32 text-slate-500">尺寸:</span>
                                <span id="gen-size" class="font-medium text-slate-900"></span>
                            </div>

                            <!-- 种子 -->
                            <div class="flex items-center p-3 bg-slate-50 rounded-lg">
                                <span class="w-32 text-slate-500">种子:</span>
                                <span id="gen-seed" class="font-medium text-slate-900"></span>
                            </div>

                            <!-- 模型 -->
                            <div class="flex items-center p-3 bg-slate-50 rounded-lg">
                                <span class="w-32 text-slate-500">模型:</span>
                                <span id="gen-model" class="font-medium text-slate-900"></span>
                            </div>

                            <!-- 步数 -->
                            <div class="flex items-center p-3 bg-slate-50 rounded-lg">
                                <span class="w-32 text-slate-500">步数:</span>
                                <span id="gen-steps" class="font-medium text-slate-900"></span>
                            </div>

                            <!-- 采样器 -->
                            <div class="flex items-center p-3 bg-slate-50 rounded-lg">
                                <span class="w-32 text-slate-500">采样器:</span>
                                <span id="gen-sampler" class="font-medium text-slate-900"></span>
                            </div>

                            <!-- 调度器 -->
                            <div class="flex items-center p-3 bg-slate-50 rounded-lg">
                                <span class="w-32 text-slate-500">调度器:</span>
                                <span id="gen-schedule" class="font-medium text-slate-900"></span>
                            </div>

                            <!-- CFG Scale -->
                            <div class="flex items-center p-3 bg-slate-50 rounded-lg">
                                <span class="w-32 text-slate-500">CFG Scale:</span>
                                <span id="gen-cfg-scale" class="font-medium text-slate-900"></span>
                            </div>

                            <!-- 降噪强度 -->
                            <div class="flex items-center p-3 bg-slate-50 rounded-lg">
                                <span class="w-32 text-slate-500">降噪强度:</span>
                                <span id="gen-denoising-strength" class="font-medium text-slate-900"></span>
                            </div>

                            <!-- Clip Skip -->
                            <div class="flex items-center p-3 bg-slate-50 rounded-lg">
                                <span class="w-32 text-slate-500">Clip Skip:</span>
                                <span id="gen-clip-skip" class="font-medium text-slate-900"></span>
                            </div>

                            <!-- VAE -->
                            <div class="flex items-center p-3 bg-slate-50 rounded-lg">
                                <span class="w-32 text-slate-500">VAE:</span>
                                <span id="gen-vae" class="font-medium text-slate-900"></span>
                            </div>

                            <!-- LoRA -->
                            <div class="md:col-span-2 flex items-start p-3 bg-slate-50 rounded-lg">
                                <span class="w-32 text-slate-500">LoRA:</span>
                                <span id="gen-lora" class="font-medium text-slate-900"></span>
                            </div>

                            <!-- 高分辨率优化 -->
                            <div class="md:col-span-2">
                                <h4 class="font-semibold text-md text-slate-800 mb-2">高分辨率优化:</h4>
                                <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
                                    <div class="flex items-center p-3 bg-slate-100 rounded-lg">
                                        <span class="w-24 text-slate-500 text-sm">放大尺寸:</span>
                                        <span id="gen-hires-resize" class="font-medium text-slate-900 text-sm"></span>
                                    </div>
                                    <div class="flex items-center p-3 bg-slate-100 rounded-lg">
                                        <span class="w-24 text-slate-500 text-sm">步数:</span>
                                        <span id="gen-hires-steps" class="font-medium text-slate-900 text-sm"></span>
                                    </div>
                                    <div class="flex items-center p-3 bg-slate-100 rounded-lg">
                                        <span class="w-24 text-slate-500 text-sm">算法:</span>
                                        <span id="gen-hires-upscaler" class="font-medium text-slate-900 text-sm"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 技术说明 -->
            <div class="mt-16 pt-10 border-t border-slate-200">
                <h3 class="font-bold text-xl text-slate-900 mb-5 text-center">本地处理技术说明</h3>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-5">
                    <div class="bg-slate-50 rounded-xl p-5 text-center border border-slate-100">
                        <div class="w-16 h-16 mx-auto bg-gradient-to-br from-slate-700 to-slate-600 rounded-full flex items-center justify-center mb-4">
                            <FontAwesomeIcon icon={faLock} className="text-white w-6"/>
                        </div>
                        <h4 class="font-bold text-lg text-slate-900 mb-2">隐私保护</h4>
                        <p class="text-slate-600">图片完全在浏览器中处理，永不离开您的设备</p>
                    </div>
                    <div class="bg-slate-50 rounded-xl p-5 text-center border border-slate-100">
                        <div class="w-16 h-16 mx-auto bg-gradient-to-br from-slate-700 to-slate-600 rounded-full flex items-center justify-center mb-4">
                            <FontAwesomeIcon icon={faBolt} className="text-white w-6"/>
                        </div>
                        <h4 class="font-bold text-lg text-slate-900 mb-2">快速处理</h4>
                        <p class="text-slate-600">利用现代浏览器能力实现快速元数据解析</p>
                    </div>
                    <div class="bg-slate-50 rounded-xl p-5 text-center border border-slate-100">
                        <div class="w-16 h-16 mx-auto bg-gradient-to-br from-slate-700 to-slate-600 rounded-full flex items-center justify-center mb-4">
                            <FontAwesomeIcon icon={faCode} className="text-white w-6"/>
                        </div>
                        <h4 class="font-bold text-lg text-slate-900 mb-2">开源技术</h4>
                        <p class="text-slate-600">基于File API和PNG标准在本地处理图片</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <Footer/>
    <script is:inline>
        async function getImageByClick() {
            const [fileHandle] = await window.showOpenFilePicker({
                types: [{
                    description: 'SD生成的PNG图片',
                    accept: {
                        'image/png': ['.png']
                    }
                }],
                excludeAcceptAllOption: true,
                multiple: false
            });
            const file = await fileHandle.getFile();
            decodeImage(file)
        }

        async function decodeImage(file) {
            document.querySelector("#upload-container").parentNode.classList.add("hidden")
            clearImageData()
            const objectURL = URL.createObjectURL(file);
            const resultSelection = document.getElementById("result-section")
            resultSelection.classList.remove("hidden")
            const imageDiv = document.getElementById("image-preview")
            imageDiv.src = objectURL
            document.getElementById("file-name").textContent = file.name
            document.getElementById("file-type").textContent = file.type
            document.getElementById("file-size").textContent = formatFileSize(file.size)
            const dimensions = await getImageDimensions(file)
            document.getElementById("image-dimensions").textContent =
                `${dimensions.width} x ${dimensions.height}, ${dimensions.ratio}`
            try {
                const result = await parsePngTextChunks(file)
                const generation_data = result.find(it => it.key === "generation_data")
                if (!generation_data) {
                    alert("这张图片不是由stable diffusion生成的，或者用户发送时没有选择发送原图导致信息丢失")
                    return
                }
                const metaJson = JSON.parse(generation_data.value)
                if (metaJson.seed === "-1") {
                    const parsedWorkflow = JSON.parse(result[1].value);
                    for (const [_, node] of Object.entries(parsedWorkflow)) {
                        if (node.class_type === 'KSampler') {
                            metaJson.seed = node.inputs.seed;
                            break;
                        }
                    }
                }
                const genData = parseGenerationData(metaJson)
                document.getElementById("gen-prompt").textContent = genData.prompt || "无";
                document.getElementById("gen-negative-prompt").textContent = genData.negativePrompt || "无";
                document.getElementById("gen-size").textContent = genData.size || "无";
                document.getElementById("gen-seed").textContent = genData.seed || "无";
                document.getElementById("gen-model").textContent = genData.model || "无";
                document.getElementById("gen-steps").textContent = genData.steps || "无";
                document.getElementById("gen-sampler").textContent = genData.sampler || "无";
                document.getElementById("gen-schedule").textContent = genData.schedule || "无";
                document.getElementById("gen-cfg-scale").textContent = genData.cfgScale || "无";
                document.getElementById("gen-denoising-strength").textContent = genData.denoisingStrength || "无";
                document.getElementById("gen-clip-skip").textContent = genData.clipSkip || "无";
                document.getElementById("gen-vae").textContent = genData.vae || "无";

                // 处理LoRA数据
                if (genData.lora && genData.lora.length > 0) {
                    document.getElementById("gen-lora").textContent = genData.lora.map(lora =>
                        `${lora.name || '未知'} (${lora.weight})`
                    ).join(', ');
                } else {
                    document.getElementById("gen-lora").textContent = "无";
                }

                // 处理高分辨率优化
                if (genData.hires) {
                    document.getElementById("gen-hires-resize").textContent = genData.hires.resize || "无";
                    document.getElementById("gen-hires-steps").textContent = genData.hires.steps || "无";
                    document.getElementById("gen-hires-upscaler").textContent = genData.hires.upscaler || "无";
                } else {
                    document.getElementById("gen-hires-resize").textContent = "无";
                    document.getElementById("gen-hires-steps").textContent = "无";
                    document.getElementById("gen-hires-upscaler").textContent = "无";
                }
            } catch (e) {
                console.log(e)
            }
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        async function getImageDimensions(file) {
            return new Promise((resolve, reject) => {
                const image = new Image();
                const url = URL.createObjectURL(file);

                image.onload = () => {
                    const width = image.naturalWidth;
                    const height = image.naturalHeight;
                    const divisor = gcd(width, height);
                    const ratio = `${width / divisor}:${height / divisor}`;
                    URL.revokeObjectURL(url);
                    resolve({
                        width,
                        height,
                        ratio
                    });
                };

                image.onerror = (err) => {
                    URL.revokeObjectURL(url);
                    reject(new Error("图片加载失败"));
                };

                image.src = url;
            });
        }

        function gcd(a, b) {
            return b === 0 ? a : gcd(b, a % b);
        }

        function parsePngTextChunks(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader()
                reader.onload = function (ev) {
                    const arrayBuffer = ev.target.result
                    const dataView = new DataView(arrayBuffer)

                    // 验证 PNG 文件签名
                    const pngSignature = [137, 80, 78, 71, 13, 10, 26, 10]
                    for (let i = 0; i < 8; i++) {
                        if (dataView.getUint8(i) !== pngSignature[i]) {
                            reject(new Error('不是有效的 PNG 文件'))
                            return
                        }
                    }

                    let offset = 8
                    const texts = []

                    // 遍历 chunk
                    while (offset < dataView.byteLength) {
                        const length = dataView.getUint32(offset, false)
                        const type = readString(dataView, offset + 4, 4)
                        const dataStart = offset + 8

                        if (type === 'tEXt') {
                            // tEXt 格式为：key\0value
                            let keyEnd = dataStart
                            while (dataView.getUint8(keyEnd) !== 0 && keyEnd < dataStart + length) {
                                keyEnd++
                            }
                            const key = readString(dataView, dataStart, keyEnd - dataStart)
                            const value = readString(dataView, keyEnd + 1, dataStart + length - keyEnd - 1)
                            texts.push({
                                key,
                                value: trimNullChar(value)
                            })
                        }

                        offset += length + 12 // chunk: length(4) + type(4) + data + crc(4)
                    }

                    resolve(texts)
                }

                reader.onerror = (err) => reject(err)
                reader.readAsArrayBuffer(file)
            })

            function readString(view, offset, length) {
                let str = ''
                for (let i = 0; i < length; i++) {
                    str += String.fromCharCode(view.getUint8(offset + i))
                }
                return str
            }

            function trimNullChar(str) {
                return str.replace(/\x00+$/, '')
            }
        }

        function parseGenerationData(metaJson) {
            // 辅助提取LoRA列表
            function extractLoraList(models) {
                if (!Array.isArray(models)) return []
                return models
                    .filter(m => m.type === 'LORA')
                    .map(m => ({
                        name: m.modelFileName,
                        label: m.label,
                        weight: m.weight
                    }))
            }

            return {
                prompt: metaJson.prompt || '',
                negativePrompt: metaJson.negativePrompt || '',
                size: (metaJson.width && metaJson.height) ? `${metaJson.width}x${metaJson.height}` : '',
                seed: metaJson.seed || '',
                model: (metaJson.baseModel && metaJson.baseModel.modelFileName) || '',
                steps: metaJson.steps || 0,
                sampler: metaJson.samplerName || '',
                ksampler: metaJson.ksamplerName || '',
                schedule: metaJson.schedule || '',
                cfgScale: metaJson.cfgScale || 0,
                guidance: metaJson.guidance || 0,
                vae: metaJson.sdVae || '',
                denoisingStrength: metaJson.denoisingStrength || 0,
                clipSkip: metaJson.clipSkip || 0,
                lora: extractLoraList(metaJson.models),
                hires: {
                    resize: (metaJson.hrResizeX && metaJson.hrResizeY) ? `${metaJson.hrResizeX}x${metaJson.hrResizeY}` : '',
                    steps: metaJson.hrSecondPassSteps || 0,
                    upscaler: metaJson.hrUpscaler || ''
                }
            }
        }

        function allowDrop(e) {
            e.preventDefault();
        }

        function handleDrop(e) {
            e.preventDefault();
            const files = Array.from(e.dataTransfer.files).filter(f => f.type.startsWith('image/'));
            if (files.length > 0) {
                decodeImage(files[0])
            }
        }

        function clearImageData() {
            const sdFields = [
                "gen-prompt",
                "gen-negative-prompt",
                "gen-size",
                "gen-seed",
                "gen-model",
                "gen-steps",
                "gen-sampler",
                "gen-schedule",
                "gen-cfg-scale",
                "gen-denoising-strength",
                "gen-clip-skip",
                "gen-vae",
                "gen-lora",
                "gen-hires-resize",
                "gen-hires-steps",
                "gen-hires-upscaler"
            ];

            sdFields.forEach(id => {
                document.getElementById(id).textContent = "";
            });
        }
    </script>
</BaseLayout>
